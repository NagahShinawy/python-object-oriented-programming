OOP
        : easy to plan, maintain and learn by new programmers
        : indivual part of program don't want to know how other parts internaly work


__INIT__: intialize new object with information and called when creating an object (before any other methods)

INSTANCE ATTR: unique for each instance(obj)

_ATTR: to give other developers who work on this class a hint that this attr should be used internal in the class,

should be access outside the class logic

==================================================================
NAME MANGLING : In name mangling process any identifier with two leading underscore
and one trailing underscore is textually replaced with _classname__identifier
where classname is the name of the current class

class Student:
    def __init__(self, name):
        self.__name = name

    def displayName(self):
        print(self.__name)

s1 = Student("Santhosh")
s1.displayName()

# Raises an error
print(s1.__name)   # you cab access attr by < _classname__identifier> ==> s1._STudent__name
# it is fully secret attr but it just python convention

# python prefix name to < _classname__identifier>

================================================================================
CHECKING class TYPE uisng :
1- type(obj)
2- isinstance(obj, class)


Newspaper.__name__: return class name [Newspaper]

****************************************************************************************************
times = Newspaper(name="TIMES")
times.__class__.__name__:
1- times.__class__: return <class '__main__.Newspaper'>
2- .__name__: return class name : Newspaper


****************************************************************************************************
class method: works on class instances not obj instances. shared bettween all obj not just related to specific obj.


****************************************************************************************************
abstract base class : just allow to inherit from but you can  NOT create instances from it.
just blueprint for others, or base template.

- abtract methods from abstract base class must to be implemented on subclass

ABC: abstract base class

class Laptop(ABC): means this Laptop class is abstract base class

=====================================================================

The "diamond problem" (sometimes referred as the "deadly diamond of death")
is the generally used term for an ambiguity that arises
when two classes B and C inherit from a superclass A, and another class D inherits from both B and C.

__mro__:

###################################################
INTERFACES
Unfortunately, Python doesn't have interfaces
we can use interface in python using ABC and multiple inheritance

######################################################################################################
COMPOSITION : has-relationship  ==> Book has Author
seperate information at different entities(classes)

Book class (HAS) Author associate with it. it is  COMPOSITION

=====================================================================
MAGIC METHODS : methods are associate with every class definition
- your class override to customize , behavior and integerate with language and work just like python biult in class
- just like you can teach your objs to act like builtin objs
CHECK MULTIMEDIA OOP REPO

=====================================================================

RECURSIVE LOOP : __getattribute__

ou seem to be under the impression that your implementation of __getattribute__ is merely a hook,
that if you provide it Python will call it, and otherwise the interpreter will do its normal magic directly.

That is not correct. When python looks up attributes on instances, __getattribute__ is the main entry for all attribute access,
and object provides the default implementation.
Your implementation is thus overriding the original,
and if your implementation provides no alternative means of returning attributes it fails.
You cannot use attribute access in that method,
since all attribute access to the instance (self) is channelled again through type(self).__getattribute__(self, attr).

The best way around this is by calling the overridden original again.
That's where super(C, self).__getattribute__(attr) comes in;
you are asking the next class in the class-resolution order to take care of the attribute access for you.

Alternatively, you can call the unbound object.__getattribute__() method directly.
The C implementation of this method is the final stop for attribute access
(it has direct access to __dict__ and is thus not bound to the same limitations).

Note that super() returns a proxy object that'll look up whatever method can be found next in the method-resolution ordered base classes.
If no such method exists, it'll fail with an attribute error.
It will never call the original method.
Thus Foo.bar() looking up super(Foo, self).
bar will either be a base-class implementation or an attribute error, never Foo.bar itself.


==========================================================================

A key difference between __getattr__ and __getattribute__ is that __getattr__ is only invoked if the attribute wasn't found the usual ways.
It's good for implementing a fallback for missing attributes, and is probably the one of two you want.

__getattribute__ is invoked before looking at the actual attributes on the object,
and so can be tricky to implement correctly. You can end up in infinite recursions very easily.

__getattribute__ is calling getattr()
__getattr__ is called if __getattribute__ does not exist or the attribute does not exist


==================================================================================================
# TODO: the __call__ method can be used to call the object like a function
    def __call__(self, title: str, author: str, price: float):
        self.title = title
        self.author = author
        self.price = price


==========================================================================================
dataclass
A data class is a class typically containing mainly data, although there arenâ€™t really any restrictions.
It is created using the new @dataclass decorator,

This module provides a decorator and functions for automatically adding generated special methods
such as __init__() and __repr__() to user-defined classes, mostly exist to hold data.