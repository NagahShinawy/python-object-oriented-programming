OOP
        : easy to plan, maintain and learn by new programmers
        : indivual part of program don't want to know how other parts internaly work


__INIT__: intialize new object with information and called when creating an object (before any other methods)

INSTANCE ATTR: unique for each instance(obj)

_ATTR: to give other developers who work on this class a hint that this attr should be used internal in the class,

should be access outside the class logic

==================================================================
NAME MANGLING : In name mangling process any identifier with two leading underscore
and one trailing underscore is textually replaced with _classname__identifier
where classname is the name of the current class

class Student:
    def __init__(self, name):
        self.__name = name

    def displayName(self):
        print(self.__name)

s1 = Student("Santhosh")
s1.displayName()

# Raises an error
print(s1.__name)   # you cab access attr by < _classname__identifier> ==> s1._STudent__name
# it is fully secret attr but it just python convention

# python prefix name to < _classname__identifier>

================================================================================
CHECKING class TYPE uisng :
1- type(obj)
2- isinstance(obj, class)


Newspaper.__name__: return class name [Newspaper]

****************************************************************************************************
times = Newspaper(name="TIMES")
times.__class__.__name__:
1- times.__class__: return <class '__main__.Newspaper'>
2- .__name__: return class name : Newspaper


****************************************************************************************************
class method: works on class instances not obj instances. shared bettween all obj not just related to specific obj.


****************************************************************************************************
abstract base class : just allow to inherit from but you can  NOT create instances from it.
just blueprint for others, or base template.

- abtract methods from abstract base class must to be implemented on subclass

ABC: abstract base class

class Laptop(ABC): means this Laptop class is abstract base class

=====================================================================

The "diamond problem" (sometimes referred as the "deadly diamond of death")
is the generally used term for an ambiguity that arises
when two classes B and C inherit from a superclass A, and another class D inherits from both B and C.

__mro__:

###################################################
INTERFACES
Unfortunately, Python doesn't have interfaces
we can use interface in python using ABC and multiple inheritance

######################################################################################################
COMPOSITION : has-relationship  ==> Book has Author
seperate information at different entities(classes)

Book class (HAS) Author associate with it. it is  COMPOSITION